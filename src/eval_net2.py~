import numpy as np
import os
import glob
import pickle
import matplotlib.pyplot as plt

'''
def calculate_euclidean_distances(specific_letter, base_dir):
    # Load the all_images dictionary from the pickle file
    all_images = "input_images/letter_imgs/all_images.pkl"
    with open(all_images, 'rb') as pickle_file:
        images = pickle.load(pickle_file)

    specific_letter_image = images[specific_letter]
    euclidean_distances = process_folders(base_dir, specific_letter_image)
    plot_distances(euclidean_distances, f'Euclidean Distance vs Deviation for Letter "{specific_letter}"')
'''

def calculate_euclidean_distances(specific_letter, base_dir):
    # Load the all_images dictionary from the pickle file
    all_images = "input_images/letter_imgs/all_images.pkl"
    with open(all_images, 'rb') as pickle_file:
        images = pickle.load(pickle_file)

    specific_letter_image = images[specific_letter]
    euclidean_distances = process_folders(base_dir, specific_letter_image)
    plot_distances(euclidean_distances, f'Euclidean Distance vs Deviation for Letter "{specific_letter}"')


def calculate_average_euclidean_distances(letter_base_dir_mapping):
    # Load the all_images dictionary from the pickle file
    all_images = "input_images/letter_imgs/all_images.pkl"
    with open(all_images, 'rb') as pickle_file:
        images = pickle.load(pickle_file)

    # Initialize a structure to hold the distances
    average_distances = {nc: {dev: [] for dev in deviation} for nc in mtjs}
    
    for letter, base_dir in letter_base_dir_mapping.items():
        specific_letter_image = images[letter]
        euclidean_distances = process_folders(base_dir, specific_letter_image)
        
        # Accumulate the distances for averaging
        for num_cells in mtjs:
            for dev in deviation:
                average_distances[num_cells][dev] += euclidean_distances[num_cells][dev]

    # Average the distances across letters
    for num_cells in mtjs:
        for dev in deviation:
            if average_distances[num_cells][dev]:
                average_distances[num_cells][dev] = np.mean(average_distances[num_cells][dev])
            else:
                average_distances[num_cells][dev] = None

    plot_distances(average_distances, 'Average Euclidean Distance vs Deviation Across Letters')


def process_folders(base_dir, letter_image):
    trained_folders = sorted(glob.glob(base_dir))
    euclidean_distances = {nc: {dev: [] for dev in deviation} for nc in mtjs}

    for trained_folder in trained_folders:
        folder_name = os.path.basename(trained_folder)
        parts = folder_name.split('_')
        dev = float(parts[-2].replace('dev', ''))
        num_cells = int(parts[-1].replace('cells', ''))

        data_file = os.path.join(trained_folder, "results.txt")
        if os.path.exists(data_file):
            data = np.genfromtxt(data_file, delimiter="", skip_header=4)
            final_weights_flat = data[-1, 1:-1]
            euclidean_distance = np.linalg.norm(final_weights_flat/num_cells - (letter_image/255.0))
            euclidean_distances[num_cells][dev].append(euclidean_distance)
    
    return euclidean_distances

def plot_distances(euclidean_distances, title):
    for num_cells, dev_distances in euclidean_distances.items():
        devs = sorted(dev_distances.keys())
        distances = [np.mean(dev_distances[dev]) for dev in devs]
        plt.plot(devs, distances, label=f'num_cells={num_cells}', marker='o')

    plt.xlabel('Deviation')
    plt.ylabel('Euclidean Distance')
    plt.title(title)
    plt.legend()
    plt.show()

# Initialize your parameter space
deviation = [i / 100 for i in range(0, 25, 5)]
mtjs = [2, 4, 6, 8]

# Example usage
# To calculate for a single letter
calculate_euclidean_distances('I', "../../snn_sim_folders/dat_1218_1347_pross_25*")

# Example usage
letter_base_dir_mapping = {
    'I': "../../snn_sim_folders/dat_1218_1347_pross_25*",
    'O': "../../snn_sim_folders/dat_1218_1425_pross_119*",
    'F': "../../snn_sim_folders/dat_1218_1507_pross_2*"
}

calculate_average_euclidean_distances(letter_base_dir_mapping)

